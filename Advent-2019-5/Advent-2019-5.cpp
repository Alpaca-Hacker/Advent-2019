// Advent-2019-5.cpp 
//

#include <iostream>

int runCode(int Input[]);

void getArg(int  instruction[5], int& Arg1, int& Arg2, int& Arg3, int* Input, int Ip);

int main()
{
	int mem[] = { 3,225,1,225,6,6,1100,1,238,225,104,0,1102,27,28,225,1,113,14,224,1001,224,-34,224,4,224,102,8,223,223,101,7,224,224,1,224,223,223,1102,52,34,224,101,-1768,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1002,187,14,224,1001,224,-126,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,54,74,225,1101,75,66,225,101,20,161,224,101,-54,224,224,4,224,1002,223,8,223,1001,224,7,224,1,224,223,223,1101,6,30,225,2,88,84,224,101,-4884,224,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1001,214,55,224,1001,224,-89,224,4,224,102,8,223,223,1001,224,4,224,1,224,223,223,1101,34,69,225,1101,45,67,224,101,-112,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1102,9,81,225,102,81,218,224,101,-7290,224,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1101,84,34,225,1102,94,90,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1007,677,677,224,102,2,223,223,1005,224,329,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,359,101,1,223,223,8,226,677,224,1002,223,2,223,1006,224,374,101,1,223,223,108,226,677,224,1002,223,2,223,1006,224,389,1001,223,1,223,1107,226,677,224,102,2,223,223,1005,224,404,1001,223,1,223,7,226,677,224,1002,223,2,223,1005,224,419,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,434,1001,223,1,223,1107,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,464,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,8,226,226,224,1002,223,2,223,1006,224,494,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,509,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,1108,677,226,224,102,2,223,223,1006,224,539,101,1,223,223,1008,677,226,224,102,2,223,223,1006,224,554,101,1,223,223,107,226,677,224,1002,223,2,223,1006,224,569,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,584,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,599,101,1,223,223,1008,226,226,224,1002,223,2,223,1005,224,614,1001,223,1,223,107,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,7,226,226,224,102,2,223,223,1006,224,644,1001,223,1,223,1007,226,226,224,102,2,223,223,1006,224,659,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226 };
	
	runCode(mem);
}

int runCode(int Input[])
{
	int Ip = 0;
	int Instruction[5];

	while (Input[Ip] != 99)
	{
		int count = 0;
		int Pass = Input[Ip];

		for (int i = 10000; i > 0; i = i / 10)
		{
			Instruction[count] = Pass / i;
			Pass = Pass - (Instruction[count] * i);
			count++;
		}

		int Opcode = Instruction[3] * 10 + Instruction[4];
		
		int Arg1 = {};
		int Arg2 = {};
		int Arg3 = {};
		getArg(Instruction, Arg1, Arg2, Arg3, Input, Ip);
		
		switch (Opcode)
		{
		case 1:
		{
			Input[Input[Ip + 3]] = Arg1 + Arg2;
			Ip += 4;
			break;
		}
		case 2:
		{
			Input[Input[Ip + 3]] = Arg1 * Arg2;
			Ip += 4;
			break;
		}
		case 3:
		{
			int In = {};
			std::cout << "[" << Ip << "]? ";
			std::cin >> In;

			Input[Input[Ip + 1]] = In;
			Ip += 2;
			break;
		}

		case 4:
		{
			std::cout << "[" << Ip << "] = " << Arg1 << std::endl;
			Ip += 2;
			break;
		}
		case 5: // JPNZ
		{
			Ip += 3;

			if (Arg1 != 0)
			{
				Ip = Arg2;
			}
			break;
		}
		case 6: // JPE
		{
			Ip += 3;

			if (Arg1 == 0)
			{
				Ip = Arg2;
			}
			break;
		}

		case 7: // Less than
		{

			Input[Input[Ip + 3]] = 0;

			if (Arg1 < Arg2)
			{
				Input[Input[Ip + 3]] = 1;
			}

			Ip += 4;
			break;
		}

		case 8: // Equals
		{
			Input[Input[Ip + 3]] = 0;

			if (Arg1 == Arg2)
			{
				Input[Input[Ip + 3]] = 1;
			}

			Ip += 4;
			break;
		}

		default:
		{
			std::cout << "Unknown Opcode at " << Ip << " [" << Input[Ip] << "]\n";
			return -999;
		}
		}
	}
	return Input[0];
}

void getArg(int  instruction[5], int& Arg1, int& Arg2, int& Arg3, int* Input, int Ip)
{
	if (instruction[2] == 0) {
		Arg1 = Input[Input[Ip + 1]];
	}
	if (instruction[2] == 1) {
		Arg1 = Input[Ip + 1];
	}

	if (instruction[1] == 0) {
		Arg2 = Input[Input[Ip + 2]];
	}
	if (instruction[1] == 1) {
		Arg2 = Input[Ip + 2];
	}

	if (Ip + 3 < sizeof(Input) / sizeof(Input[0])) {
		if (instruction[0] == 0) {
			Arg3 = Input[Input[Ip + 3]];
		}
		if (instruction[0] == 1) {
			Arg2 = Input[Ip + 3];
		}
	}
}


